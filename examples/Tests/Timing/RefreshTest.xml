<?xml version="1.0" standalone="no"?>
<monkeyml version="1.0">
    <io_devices tag="IO Devices"></io_devices>
    <variables tag="Variables">
        <variable tag="counter" full_name="fullname_5" default_value="0" scope="GLOBAL" type="INTEGER" editable="ALWAYS" logging="WHEN_CHANGED"></variable>
        <variable tag="stm" full_name="stm" default_value="0" scope="GLOBAL" type="INTEGER" editable="never" logging="when_changed"></variable>
        <variable tag="stm_pos_x" full_name="stm_pos_x" default_value="40" scope="GLOBAL" type="INTEGER" editable="never" logging="when_changed"></variable>
        <variable tag="stm_pos_y" full_name="stm_pos_y" default_value="0" scope="GLOBAL" type="INTEGER" editable="never" logging="when_changed"></variable>
        <variable tag="start_time" scope="global" logging="when_changed" default_value="0" type="integer"></variable>
        <variable tag="end_time" scope="global" logging="when_changed" default_value="1" type="integer"></variable>
        <variable tag="frame_rate" scope="global" logging="when_changed" default_value="0" type="float"></variable>
        <variable tag="expected_frame_rate" scope="global" logging="when_changed" default_value="60" type="float"></variable>
        <variable tag="frame_rate_tolerance" scope="global" logging="when_changed" default_value="1" type="float"></variable>
        <variable tag="predicted_output_time" scope="global" logging="when_changed" default_value="0" type="any"></variable>
        <variable tag="current_time" scope="global" logging="when_changed" default_value="0" type="any"></variable>
    </variables>
    <sounds tag="Sounds"></sounds>
    <stimuli tag="Stimuli">
        <stimulus type="rectangle" tag="black rect" color="0,0,0" x_size="5" y_size="5" x_position="0" y_position="0" rotation="0"></stimulus>
        <stimulus type="rectangle" tag="white rect" color="1,1,1" x_size="5" y_size="5" x_position="0" y_position="0" rotation="0"></stimulus>
    </stimuli>
    <experiment tag="simple_refresh_test" full_name="simple_refresh_test">
        <protocol tag="srt" full_name="srt" selection="sequential_ascending" nsamples="1" sampling_method="cycles" description="" interruptible="YES">
            <block tag="srt_" full_name="srt" selection="sequential_ascending" nsamples="1" sampling_method="cycles" description="" interruptible="YES">
                <task_system tag="task_system1" full_name="fullname_1" description="" interruptible="YES">
                    <task_system_state tag="initiation" full_name="initiation" description="" interruptible="YES">
                        <action tag="report message" full_name="report message" type="report" message="**********STARTING**********"></action>
                        <action type="assignment" tag="reset counter" variable="counter" value="0"></action>
                        <action tag="display refresh" full_name="display refresh" type="update_stimulus_display"></action>
                        <action tag="start timer" full_name="start timer" type="start_timer" timer="timer" duration="100ms"></action>
                        <action type="assignment" tag="store start time" variable="start_time" value="now()"></action>
                        <transition tag="go to present1" full_name="go present1" target="present1" type="timer_expired" timer="timer"></transition>
                    </task_system_state>
                    <task_system_state tag="present1" full_name="present1" description="" interruptible="YES">
                        <action tag="QueueStimulus_black" full_name="fullname_1" type="queue_stimulus" stimulus="black rect"></action>
                        <action tag="display refresh" type="update_stimulus_display" predicted_output_time="predicted_output_time"></action>
                        <action type="assignment" tag="Store current time" variable="current_time" value="now()"></action>
                        <action type="assert" tag="Check predicted output time" condition="(predicted_output_time &gt; current_time) &amp;&amp; (predicted_output_time - current_time &lt; 2e6 / refreshRate())" message="predicted_output_time = $predicted_output_time, current_time = $current_time" stop_on_failure="0"></action>
                        <transition tag="AlwaysGo_2" full_name="fullname_2" target="present2" type="direct"></transition>
                    </task_system_state>
                    <task_system_state tag="present2" full_name="present1" description="" interruptible="YES">
                        <action tag="QueueStimulus_white" full_name="fullname_1" type="queue_stimulus" stimulus="white rect"></action>
                        <action tag="display refresh" type="update_stimulus_display" predicted_output_time="predicted_output_time"></action>
                        <action type="assignment" tag="Store current time" variable="current_time" value="now()"></action>
                        <action type="assert" tag="Check predicted output time" condition="(predicted_output_time &gt; current_time) &amp;&amp; (predicted_output_time - current_time &lt; 2e6 / refresh_rate())" message="predicted_output_time = $predicted_output_time, current_time = $current_time" stop_on_failure="0"></action>
                        <action tag="update_counter" full_name="fullname_1" type="assignment" variable="counter" value="counter+1"></action>
                        <transition tag="ConditionalTransition_4" full_name="fullname_4" target="success" type="conditional" condition="counter==450"></transition>
                        <transition tag="AlwaysGo_2" full_name="fullname_2" target="present1" type="direct"></transition>
                    </task_system_state>
                    <task_system_state tag="success" full_name="success" description="" interruptible="YES">
                        <action type="assignment" tag="store end time" variable="end_time" value="now()"></action>
                        <action type="assignment" tag="compute frame rate" variable="frame_rate" value="1000000.0 * (2 * counter) / (end_time - start_time)"></action>
                        <action tag="report message" full_name="report message" type="report" message="************TRIAL COMPLETE********** $counter cycles between $start_time and $end_time. Frame rate = $frame_rate"></action>
                        <action type="assert" tag="Assert frame rate within tolerance" condition="abs(frame_rate - expected_frame_rate) &lt;= frame_rate_tolerance" message="frame rate not within tolerance: expected $expected_frame_rate, got $frame_rate"></action>
                        <transition type="yield" tag="yield" full_name="yield"></transition>
                    </task_system_state>
                </task_system>
            </block>
        </protocol>
    </experiment>
</monkeyml>
